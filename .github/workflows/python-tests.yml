name: Python CI Linting and Testing

on:
  push:
    branches:
      - main
    paths:
      - "app/**"
      - "tests/**"
      - "requirements.txt"
  pull_request:

env:
  PYTHON: '3.10'

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up python ${{ env.PYTHON }}
      uses: actions/setup-python@v2
      with:
        python-version: "${{ env.PYTHON }}"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python --version
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Build coverage file
      run: |
        python3 -m pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=app tests/ | tee pytest-coverage.txt

    - name: Pytest coverage comment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./pytest.xml
        title: pytest coverage
        badge-title: Test Coverage
        hide-badge: false
        hide-report: false
        create-new-comment: false
        hide-comment: false
        report-only-changed-files: false

    - name: run pytest
      run: |
        python3 -m pytest --verbose --junitxml=testresults.xml

    - name: upload test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: unittest results
        path: testresults.xml

  results:
    runs-on: ubuntu-latest
    needs: tests
    if: success() || failure()

    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: unittest results
        path: artifacts

    - name: publish test results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: artifacts/**/*.xml
